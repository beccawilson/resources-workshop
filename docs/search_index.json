[
["the-resourcer-package.html", "Tutorial: Using the resources in Opal and DataSHIELD 1 The resourcer Package 1.1 Installation 1.2 Load", " Tutorial: Using the resources in Opal and DataSHIELD Juan R. Gonzalez Bioinformatics Research Group in Epidemiolgy (BRGE), Barcelona Insitute for Global Health (ISGlobal)juanr.gonzalez@isglobal.org 2021-01-23 1 The resourcer Package The resourcer package is an R implementation of the concept of Resources (see also the source repository). 1.1 Installation Install the package if not already available in the R environment. if (!require(resourcer)) { install.packages(c(&quot;resourcer&quot;)) } 1.2 Load When loading the resourcer package, the output informs about the available resource resolvers. These are responsible for building the appropriate connector to a resource object. This set of resolvers can be extended to new types of resources. library(resourcer) Note that the resourcer package makes an extensive use of the R6 class system. "],
["building-a-data-resource-object.html", "2 Building a Data Resource Object 2.1 CSV File Resource 2.2 R Data File Resource", " 2 Building a Data Resource Object The resource gives access to some data. 2.1 CSV File Resource The file is publicly available on the Github website: preview of CAPostalCodes.csv. CAPostalCodes.res &lt;- resourcer::newResource( url = &quot;https://github.com/obiba/obiba-home/raw/master/opal/seed/fs/home/administrator/geo/CAPostalCodes.csv&quot;, format = &quot;csv&quot; ) CAPostalCodes.res $name [1] &quot;&quot; $url [1] &quot;https://github.com/obiba/obiba-home/raw/master/opal/seed/fs/home/administrator/geo/CAPostalCodes.csv&quot; $identity NULL $secret NULL $format [1] &quot;csv&quot; attr(,&quot;class&quot;) [1] &quot;resource&quot; Note that at this point, no connection, nor data extraction has been performed. It is a simple definition object. The following code will resolve the resource and build the corresponding client connector. CAPostalCodes.client &lt;- resourcer::newResourceClient(CAPostalCodes.res) class(CAPostalCodes.client) [1] &quot;TidyFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; The resource was identified as a “tidy” data file, i.e. data that can be read using one of the reader developed by the tidyverse project. In the case of the csv data format, the readr package is used. This CSV reader tries to guess the data type of the columns. At this point again, no connection with the remote server has been formally established. This client function call gives access to the data as a data.frame: CAPostalCodes.data &lt;- CAPostalCodes.client$asDataFrame() head(CAPostalCodes.data) # A tibble: 6 x 5 entity_id Place Province ProvinceCode Coordinate &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 T0E Western Alberta (Jasper) Alberta AB [-117.2308,53.4021] 2 T0A Eastern Alberta (St. Paul) Alberta AB [-111.7174,54.766] 3 T0B Wainwright Region (Tofield) Alberta AB [-111.5816,53.0727] 4 T0C Central Alberta (Stettler) Alberta AB [-112.8113,52.4922] 5 T0H Northwestern Alberta (High Level) Alberta AB [-116.9153,57.5403] 6 T0G North Central Alberta (Slave Lake) Alberta AB [-114.4529,55.6993] It is also possible to coerce a resource object directly to a data.frame, without explicitly building a resource client object. It is as simple as: CAPostalCodes.data &lt;- as.data.frame(CAPostalCodes.res) head(CAPostalCodes.data) # A tibble: 6 x 5 entity_id Place Province ProvinceCode Coordinate &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; 1 T0E Western Alberta (Jasper) Alberta AB [-117.2308,53.4021] 2 T0A Eastern Alberta (St. Paul) Alberta AB [-111.7174,54.766] 3 T0B Wainwright Region (Tofield) Alberta AB [-111.5816,53.0727] 4 T0C Central Alberta (Stettler) Alberta AB [-112.8113,52.4922] 5 T0H Northwestern Alberta (High Level) Alberta AB [-116.9153,57.5403] 6 T0G North Central Alberta (Slave Lake) Alberta AB [-114.4529,55.6993] 2.2 R Data File Resource The file is stored in a Opal server file system. Authentication and authorization apply and is performed with a Personal Access Token. gps_participant.res &lt;- resourcer::newResource( url = &quot;opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/gps_participant.RData&quot;, format = &quot;data.frame&quot;, secret = &quot;EeTtQGIob6haio5bx6FUfVvIGkeZJfGq&quot; ) gps_participant.res $name [1] &quot;&quot; $url [1] &quot;opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/gps_participant.RData&quot; $identity NULL $secret [1] &quot;EeTtQGIob6haio5bx6FUfVvIGkeZJfGq&quot; $format [1] &quot;data.frame&quot; attr(,&quot;class&quot;) [1] &quot;resource&quot; Make a resource client object. gps_participant.client &lt;- resourcer::newResourceClient(gps_participant.res) class(gps_participant.client) [1] &quot;RDataFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; The resource was identified as an R data file, containing a data.frame object. When extracting the inner R object from the remote R data file, the resource client object will establish the connection with the Opal server and will authenticate with the provided Personal Access Token; then it will perform the file download and will read its content. The function getValue() returns the raw object (in this case a data.frame) gps_participant.data &lt;- gps_participant.client$getValue() head(gps_participant.data) id age sex inc fsmoke fedu BMI 1 1 43.24393 0 45730.56 former Higher 28.95163 2 2 44.17817 1 50169.00 current Secondary 23.22624 3 3 53.89189 0 55981.00 never Higher 26.60151 4 4 43.36741 1 67524.85 never Secondary 24.60853 5 5 46.82916 0 47397.88 never Higher 24.67301 6 6 57.70891 0 34686.13 former Advanced 24.91010 There are no limitations regarding the class of the object contained in the R data file. The only requirements are the ones of the base::load() function, i.e. the library in which the class of the object is defined must be available in the R environment. "],
["building-a-computation-resource-object.html", "3 Building a Computation Resource Object 3.1 SSH Resource", " 3 Building a Computation Resource Object The resource gives access to some remote computation services. 3.1 SSH Resource A server is accessible through a secure shell. The path part of the URL is the remote working directory. The available commands are defined by the exec query parameter. ssh.res &lt;- resourcer::newResource( url = &quot;ssh://plink-demo.obiba.org:2222/home/master/brge?exec=ls,pwd&quot;, identity = &quot;master&quot;, secret = &quot;master&quot; ) The resource connection client is resolved as follow: ssh.client &lt;- resourcer::newResourceClient(ssh.res) class(ssh.client) [1] &quot;SshResourceClient&quot; &quot;CommandResourceClient&quot; &quot;ResourceClient&quot; &quot;R6&quot; This type of client allows to issue shell commands through a SSH connection. ssh.client$getAllowedCommands() [1] &quot;ls&quot; &quot;pwd&quot; Trying to coerce to a data.frame raises an error, because there is no tabular data representation of such a resource: tryCatch(ssh.client$asDataFrame(), error = function(e) e) &lt;simpleError in ssh.client$asDataFrame(): Operation not applicable&gt; To execute a remote shell command: rval &lt;- ssh.client$exec(&quot;ls&quot;, &quot;-la&quot;) rval $status [1] 0 $output [1] &quot;total 92992&quot; [2] &quot;dr-xr-xr-x 2 master master 4096 Apr 29 2020 .&quot; [3] &quot;drwxr-xr-x 7 master master 4096 Jan 20 20:25 ..&quot; [4] &quot;-r--r--r-- 1 master master 57800003 Apr 29 2020 brge.bed&quot; [5] &quot;-r--r--r-- 1 master master 2781294 Apr 29 2020 brge.bim&quot; [6] &quot;-r--r--r-- 1 master master 45771 Apr 29 2020 brge.fam&quot; [7] &quot;-r--r--r-- 1 master master 34442346 Apr 29 2020 brge.gds&quot; [8] &quot;-r--r--r-- 1 master master 59802 Apr 29 2020 brge.phe&quot; [9] &quot;-r--r--r-- 1 master master 72106 Apr 29 2020 brge.txt&quot; $error character(0) $command [1] &quot;cd /home/master/brge &amp;&amp; ls -la&quot; attr(,&quot;class&quot;) [1] &quot;resource.exec&quot; The resulting value contains different information: status of the command (failure if not 0), output the character vector of the command output, error is the error message if command failed, command is the actual shell command that was executed. For example some bad shell command arguments would return a value with an error: rval &lt;- ssh.client$exec(&quot;ls&quot;, &quot;-xyz&quot;) rval $status [1] 2 $output character(0) $error [1] &quot;ls: invalid option -- &#39;y&#39;&quot; &quot;Try &#39;ls --help&#39; for more information.&quot; $command [1] &quot;cd /home/master/brge &amp;&amp; ls -xyz&quot; attr(,&quot;class&quot;) [1] &quot;resource.exec&quot; Calling a shell command that is not allowed would raise an error. tryCatch(ssh.client$exec(&quot;plink&quot;), error = function(e) e) &lt;simpleError in private$makeCommand(command, params): Shell command not allowed: plink&gt; "],
["more-about-resources.html", "4 More About Resources 4.1 Extending Resources 4.2 Resources in Opal and DataSHIELD", " 4 More About Resources 4.1 Extending Resources The resourcer package comes with some built-in resource types. These can be extended by programming your own resource resolver and client. For more information, read the sections about Resources in the book Orchestrating privacy-protected non-disclosive big data analyses of data from different resources with R and DataSHIELD. 4.2 Resources in Opal and DataSHIELD The Opal data management server facilitates the usage of resources by: providing a graphical user interface for declaring resources (defining the resource’s URL can be tricky), discovering which type of resources are available in the R server environment, granting permissions to use the resource, assigning resources in a R server session, integrating resources to DataSHIELD. See also Tutorial: Using the resources in Opal and DataSHIELD. "],
["introduction.html", "5 Introduction", " 5 Introduction This tutorial aims to provide examples about how to deal with resources in Opal and DataSHIELD. More detailed information can be found in our bookdown Orchestrating privacy-protected non-disclosive big data analyses of data from different resources with R and DataSHIELD. A quick demo of the resources is also available in Tutorial: Resources in R. "],
["getting-started.html", "6 Getting started", " 6 Getting started This document can be reproduced by installing the following packages install.packages(&quot;DSOpal&quot;) devtools::install_github(&quot;datashield/dsBaseClient&quot;) devtools::install_github(&quot;isglobal-brge/dsOmicsClient&quot;) Then the packages are loaded as usual library(DSOpal) library(dsBaseClient) library(dsOmicsClient) We have set up an Opal demo site to illustrate how to perform some basic analyses using DataSHIELD as well as how to deal with different resources for ’omic data. The Opal server can be accessed with the credentials: username: administrator password: password In this figure we can see all the projects available. Figure 6.1: Opal demo site available projects This tutorial will mainly make use of the resources available at RSRC project Figure 6.2: Resources available at Opal demo site of RSRC project In order to make the reader familiar with Opal we recommend visiting the Opal online documentation. "],
["adding-a-new-resource-to-the-opal-server.html", "7 Adding a new resource to the Opal server 7.1 Resource as a text file 7.2 Resource as a Rdata file (data frame) 7.3 Resource as an Rdata file (ExpressionSet)", " 7 Adding a new resource to the Opal server The resources can be uploaded in the Opal server manually as described here. However, it can also be done using R code as it is described in the following subsections. 7.1 Resource as a text file Let us imagine that we have a tsv file that is stored in our hospital, server, cloud, GitHub repository or any other site. This file is containing information on several variables we want to analyze using DataSHIELD. Let us also imagine that this data is available at this URL: http://duffel.rail.bio/recount/TCGA/TCGA.tsv. This file encodes the phenotypes corresponding to 11,287 samples from TCGA that are available in the Recount project. Thanks to the resources this dataset is not necessary to be uploaded into the Opal server as a table anymore. We can analyze this data with DataSHIELD packages by creating a new resource as following. Let us start by login the Opal server. NOTE that this requires full permissions and, hence, we access with administrator rights o &lt;- opal.login(username = &#39;administrator&#39;, password = &#39;password&#39;, url = &#39;https://opal-demo.obiba.org&#39;) TCGA dataset can be added as a new resource as following opal.resource_create(opal = o, project = &#39;RSRC&#39;, name = &#39;pheno_TCGA&#39;, url = &#39;http://duffel.rail.bio/recount/TCGA/TCGA.tsv&#39;, format = &#39;tsv&#39;) We can see that this resource have been added to our project by opal.resources(o, project=&#39;RSRC&#39;) name project 1 1000G_covars RSRC 2 1000G_vcf RSRC 3 CNSIM1 RSRC 4 CNSIM2 RSRC 5 CNSIM3 RSRC 6 EGA RSRC 7 GSE66351_1 RSRC 8 GSE66351_2 RSRC 9 GSE80970 RSRC 10 asthma RSRC 11 brge RSRC 12 brge_plink RSRC 13 brge_vcf RSRC 14 example.vcf RSRC 15 ga4gh_1000g RSRC 16 genexpr RSRC 17 gps_data RSRC 18 gps_participant RSRC 19 pheno_TCGA RSRC 20 takeaway_gps RSRC 21 tcga_liver RSRC url 1 https://raw.githubusercontent.com/isglobal-brge/brgeUtils/master/data/covars_1000G.txt 2 https://raw.githubusercontent.com/isglobal-brge/brgeUtils/master/data/1KG_phase3_subset_chr22.vcf.gz?method=biallelic.only&amp;snpfirstdim=TRUE 3 mysql://mysqldata:3306/opal/CNSIM1 4 file:///srv/data/CNSIM2.zsav 5 opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/CNSIM3.zip 6 https://ega.ebi.ac.uk:8052/elixir/tickets/tickets/EGAF00001753756?&amp;referenceName=chr21&amp;start=1&amp;end=100 7 https://github.com/isglobal-brge/brgedata/raw/master/data/gse66351_1.rda 8 https://github.com/isglobal-brge/brgedata/raw/master/data/gse66351_2.rda 9 file:///srv/data/GSE80970.Rdata 10 https://github.com/isglobal-brge/brgedata/raw/master/data/asthma.rda 11 https://raw.githubusercontent.com/isglobal-brge/brgedata/master/inst/extdata/brge.txt 12 ssh://plink-demo.obiba.org:2222/home/master/brge?exec=ls,plink1,plink 13 https://raw.githubusercontent.com/isglobal-brge/brgedata/master/inst/extdata/brge.vcf.gz?method=biallelic.only&amp;snpfirstdim=TRUE 14 https://raw.githubusercontent.com/isglobal-brge/scoreInvHap/master/inst/extdata/example.vcf?method=biallelic.only&amp;snpfirstdim=TRUE 15 https://htsget.ga4gh.org/variants/1000genomes.phase1.chr1?format=VCF&amp;referenceName=1&amp;start=1&amp;end=100000 16 https://github.com/isglobal-brge/brgedata/raw/master/data/brge_gexp.rda 17 opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/gps_data_final.RData 18 opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/gps_participant.RData 19 http://duffel.rail.bio/recount/TCGA/TCGA.tsv 20 opal+https://opal-demo.obiba.org/ws/files/projects/RSRC/takeaway_data.RData 21 https://github.com/isglobal-brge/brgedata/raw/master/data/rse_gene_liver.Rdata format created updated 1 csv 2021-01-23T05:47:34Z 2021-01-23T05:47:34Z 2 VCF2GDS 2021-01-23T05:47:34Z 2021-01-23T05:47:34Z 3 &lt;NA&gt; 2021-01-23T05:47:33Z 2021-01-23T05:47:33Z 4 sav 2021-01-23T05:47:33Z 2021-01-23T05:47:33Z 5 csv 2021-01-23T05:47:34Z 2021-01-23T05:47:34Z 6 EGAhtsgetBAM 2021-01-23T05:47:37Z 2021-01-23T05:47:37Z 7 ExpressionSet 2021-01-23T05:47:32Z 2021-01-23T05:47:32Z 8 ExpressionSet 2021-01-23T05:47:33Z 2021-01-23T05:47:33Z 9 ExpressionSet 2021-01-23T05:47:33Z 2021-01-23T05:47:33Z 10 data.frame 2021-01-23T15:35:17Z 2021-01-23T15:35:17Z 11 tsv 2021-01-23T05:47:35Z 2021-01-23T05:47:35Z 12 &lt;NA&gt; 2021-01-23T05:47:36Z 2021-01-23T05:47:36Z 13 VCF2GDS 2021-01-23T05:47:35Z 2021-01-23T05:47:35Z 14 VCF2GDS 2021-01-23T05:47:34Z 2021-01-23T05:47:34Z 15 GA4GHVCF 2021-01-23T05:47:37Z 2021-01-23T05:47:37Z 16 ExpressionSet 2021-01-23T15:35:23Z 2021-01-23T15:35:23Z 17 SpatialLinesDataFrame 2021-01-23T05:47:36Z 2021-01-23T05:47:36Z 18 data.frame 2021-01-23T05:47:36Z 2021-01-23T05:47:36Z 19 tsv 2021-01-23T15:34:58Z 2021-01-23T15:34:58Z 20 SpatialPointsDataFrame 2021-01-23T05:47:36Z 2021-01-23T05:47:36Z 21 RangedSummarizedExperiment 2021-01-23T05:47:35Z 2021-01-23T05:47:35Z We can test the resource assignment. First we assign the resource to an object called client opal.assign.resource(o, &#39;client&#39;, &#39;RSRC.pheno_TCGA&#39;) opal.execute(o, &#39;class(client)&#39;) [1] &quot;TidyFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; We see that this object is of class TidyFileResourceClient. The resourcer package will be use then to “resolve” this resource and to load it into the R server as we will see later. We logout the connection opal.logout(o) Then, we can analyze the data using DataSHIELD by making use of the created resource. We start by login the resource using an user who have DataSHIELD permissions to our Opal server (dsuser). builder &lt;- newDSLoginBuilder() builder$append(server = &#39;study1&#39;, url = &#39;https://opal-demo.obiba.org&#39;, user = &#39;dsuser&#39;, password = &#39;password&#39;, resource = &#39;RSRC.pheno_TCGA&#39;, driver = &#39;OpalDriver&#39;) logindata &lt;- builder$build() Then, we load the resource into R as res conns &lt;- datashield.login(logins = logindata, assign = TRUE, symbol = &#39;res&#39;) The resourcer package which is installed in the Opal server contains functions that facilitates the access of this data in the R server. In particular, we will have access to the resource as a data.frame called pheno. To this end, as.resource.data.frame () function is used to coerce the resource (e.g. ResourceClient object) to a data frame. datashield.assign.expr(conns, symbol = &#39;pheno&#39;, expr = quote(as.resource.data.frame(res))) ds.class(&#39;pheno&#39;) $study1 [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; ds.dim(&#39;pheno&#39;) $`dimensions of pheno in study1` [1] 11287 859 $`dimensions of pheno in combined studies` [1] 11287 859 datashield.logout(conns) 7.2 Resource as a Rdata file (data frame) Now, let us assume that our resource is a data frame saved in a .Rdata file available at: https://github.com/isglobal-brge/brgedata/raw/master/data/asthma.rda. We can do similar steps to load the resource into the Opal server: o &lt;- opal.login(&#39;administrator&#39;,&#39;password&#39;, url=&#39;https://opal-demo.obiba.org&#39;) opal.resource_create(opal = o, project = &#39;RSRC&#39;, name = &#39;asthma&#39;, url = &#39;https://github.com/isglobal-brge/brgedata/raw/master/data/asthma.rda&#39;, format = &#39;data.frame&#39;) opal.assign.resource(o, &#39;client&#39;, &#39;RSRC.asthma&#39;) opal.execute(o, &#39;class(client)&#39;) [1] &quot;RDataFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; opal.logout(o) In that case the class of the client object is RdataFileResourceClient whose resolver is also implemented in the resourcer package. Then, we can analyze this data using DataSHIELD functions as usual. In that case, instead of using as.resource.data.frame () (it is also possible to use it) we make use of the function as.resource.object () which coerce the resource to an internal data object that depends on the implementation of this object. builder &lt;- newDSLoginBuilder() builder$append(server = &#39;study1&#39;, url = &#39;https://opal-demo.obiba.org&#39;, user = &#39;dsuser&#39;, password = &#39;password&#39;, resource = &#39;RSRC.asthma&#39;, driver = &#39;OpalDriver&#39;) logindata &lt;- builder$build() conns &lt;- datashield.login(logins = logindata, assign = TRUE, symbol = &#39;res&#39;) datashield.assign.expr(conns, symbol = &#39;asthma&#39;, expr = quote(as.resource.object(res))) Now, we can perform some standard statistical analysis in DataSHIELD as usual: ds.class(&#39;asthma&#39;) $study1 [1] &quot;data.frame&quot; ds.colnames(&#39;asthma&#39;) $study1 [1] &quot;country&quot; &quot;gender&quot; &quot;age&quot; &quot;bmi&quot; &quot;smoke&quot; &quot;casecontrol&quot; [7] &quot;rs4490198&quot; &quot;rs4849332&quot; &quot;rs1367179&quot; &quot;rs11123242&quot; &quot;rs13014858&quot; &quot;rs1430094&quot; [13] &quot;rs1430093&quot; &quot;rs746710&quot; &quot;rs1430090&quot; &quot;rs6737251&quot; &quot;rs11685217&quot; &quot;rs1430097&quot; [19] &quot;rs10496465&quot; &quot;rs3756688&quot; &quot;rs2303063&quot; &quot;rs1422993&quot; &quot;rs2400478&quot; &quot;rs714588&quot; [25] &quot;rs1023555&quot; &quot;rs898070&quot; &quot;rs963218&quot; &quot;rs1419835&quot; &quot;rs765023&quot; &quot;rs1345267&quot; [31] &quot;rs324381&quot; &quot;hopo546333&quot; &quot;rs184448&quot; &quot;rs324396&quot; &quot;rs324957&quot; &quot;rs324960&quot; [37] &quot;rs10486657&quot; &quot;rs324981&quot; &quot;rs1419780&quot; &quot;rs325462&quot; &quot;rs727162&quot; &quot;rs10250709&quot; [43] &quot;rs6958905&quot; &quot;rs10238983&quot; &quot;rs4941643&quot; &quot;rs3794381&quot; &quot;rs2031532&quot; &quot;rs2247119&quot; [49] &quot;rs8000149&quot; &quot;rs2274276&quot; &quot;rs7332573&quot; &quot;rs3829366&quot; &quot;rs6084432&quot; &quot;rs512625&quot; [55] &quot;rs3918395&quot; &quot;rs2787095&quot; &quot;rs2853215&quot; ds.glm(casecontrol ~ rs1422993 + smoke + bmi, data=&#39;asthma&#39;, family=&#39;binomial&#39;) $Nvalid [1] 1559 $Nmissing [1] 19 $Ntotal [1] 1578 $disclosure.risk RISK OF DISCLOSURE study1 0 $errorMessage ERROR MESSAGES study1 &quot;No errors&quot; $nsubs [1] 1559 $iter [1] 5 $family Family: binomial Link function: logit $formula [1] &quot;casecontrol ~ rs1422993 + smoke + bmi&quot; $coefficients Estimate Std. Error z-value p-value low0.95CI.LP high0.95CI.LP P_OR (Intercept) -2.45698463 0.36442291 -6.7421245 1.560873e-11 -3.17124042 -1.74272885 0.07892927 rs1422993GT 0.35228783 0.13087079 2.6918752 7.105152e-03 0.09578580 0.60878987 1.42231786 rs1422993TT 0.14131809 0.25709215 0.5496787 5.825397e-01 -0.36257326 0.64520944 1.15179096 smoke -0.36267146 0.14370585 -2.5237069 1.161247e-02 -0.64432976 -0.08101316 0.69581500 bmi 0.04234646 0.01349121 3.1388188 1.696303e-03 0.01590418 0.06878875 1.04325586 low0.95CI.P_OR high0.95CI.P_OR (Intercept) 0.04026246 0.1489667 rs1422993GT 1.10052331 1.8382056 rs1422993TT 0.69588333 1.9063863 smoke 0.52501431 0.9221816 bmi 1.01603132 1.0712099 $dev [1] 1579.802 $df [1] 1554 $output.information [1] &quot;SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES&quot; Do not forget to close the connection after finishing the analyses datashield.logout(conns) 7.3 Resource as an Rdata file (ExpressionSet) One of the main advantages of using the resources as an R file is that it may contains any type of R object. Let us illustrate this by having an R file with an ExpressionSet object which is a [Bioconductor] class to encapsulate omic data along with phenotypic information and annotation. See here for a description and this figure for a visual idea of how these objects are organized Figure 7.1: ExpressionSet infrastructure He have information on gene expression of 67,528 genes measured in 100 samples that are available in a ExpressionSet here: https://github.com/isglobal-brge/brgedata/raw/master/data/brge_gexp.rda. Let us illustrate how to create a resource in the Opal server having access to that data o &lt;- opal.login(&#39;administrator&#39;,&#39;password&#39;, url=&#39;https://opal-demo.obiba.org&#39;) opal.resource_create(opal = o, project = &#39;RSRC&#39;, name = &#39;genexpr&#39;, url = &#39;https://github.com/isglobal-brge/brgedata/raw/master/data/brge_gexp.rda&#39;, format = &#39;ExpressionSet&#39;) opal.assign.resource(o, &#39;client&#39;, &#39;RSRC.genexpr&#39;) opal.execute(o, &#39;class(client)&#39;) [1] &quot;RDataFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; Now, we are ready to perform any data analysis using DataSHIELD as following. NOTE that in this case the R server must have installed those specific packages to deal with our specific class of objects. In that case, ExpressionSets are managed with Biobase Bioconductor package. If so, the function as.resource.object () which coerce the resource to an ExpressionSet that, in this case, will be available in the R server as an object called eSet. builder &lt;- newDSLoginBuilder() builder$append(server = &#39;study1&#39;, url = &#39;https://opal-demo.obiba.org&#39;, user = &#39;dsuser&#39;, password = &#39;password&#39;, resource = &#39;RSRC.genexpr&#39;, driver = &#39;OpalDriver&#39;) logindata &lt;- builder$build() conns &lt;- datashield.login(logins = logindata, assign = TRUE, symbol = &#39;res&#39;) datashield.assign.expr(conns, symbol = &#39;eSet&#39;, expr = quote(as.resource.object(res))) Then, we can use DataSHIELD fuctions as usual ds.class(&#39;eSet&#39;) $study1 [1] &quot;ExpressionSet&quot; attr(,&quot;package&quot;) [1] &quot;Biobase&quot; ds.dim(&#39;eSet&#39;) $`dimensions of eSet in study1` NULL $`dimensions of eSet in combined studies` numeric(0) In that case, if we execute ds.dim(&#39;eSet&#39;) we get an error, but … we have developed a pair of DataSHIELD packages, called dsOmics and dsOmicsClient that allow us to deal with this type of objects in DataSHIELD and that are able to get the desired information (i.e. the dimension of the ExpressionSet). dsOmicsClient::ds.nFeatures(&#39;eSet&#39;) $study1 Features 67528 attr(,&quot;class&quot;) [1] &quot;dsnFeatures&quot; &quot;list&quot; dsOmicsClient::ds.nSamples(&#39;eSet&#39;) $study1 Samples 100 attr(,&quot;class&quot;) [1] &quot;dsnSamples&quot; &quot;list&quot; We finish the example by login out datashield.logout(conns) "],
["using-the-resources-in-datashield.html", "8 Using the resources in DataSHIELD 8.1 Data analysis combining different types of resources 8.2 Data analysis using a remote computation server", " 8 Using the resources in DataSHIELD 8.1 Data analysis combining different types of resources Here, we will use data from three studies that are available in our Opal demo repository. The three databases are called CNSIM1, CNSIM2, CNSIM3 and are available as three different resources: mySQL database, SPSS file and CSV file (see Figure 6.2). This example mimics real situations where different hospitals or research centers manage their own databases containing harmonized data. Data correspond to three simulated datasets with different numbers of observations of 11 harmonized variables. They contain synthetic data based on a model derived from the participants of the 1958 Birth Cohort, as part of an obesity methodological development project. The available variables are: Variable Description Type Note LAB_TSC Total Serum Cholesterol numeric mmol/L LAB_TRIG Triglycerides numeric mmol/L LAB_HDL HDL Cholesterol numeric mmol/L LAB_GLUC_ADJUSTED Non-Fasting Glucose numeric mmol/L PM_BMI_CONTINUOUS Body Mass Index (continuous) numeric kg/m2 DIS_CVA History of Stroke factor 0 = Never had stroke; 1 = Has had stroke MEDI_LPD Current Use of Lipid Lowering Medication (from categorical assessment item) factor 0 = Not currently using lipid lowering medication; 1 = Currently using lipid lowering medication DIS_DIAB History of Diabetes factor 0 = Never had diabetes; 1 = Has had diabetes DIS_AMI History of Myocardial Infarction factor 0 = Never had myocardial infarction; 1 = Has had myocardial infarction GENDER Gender factor 0 = Female PM_BMI_CATEGORICAL Body Mass Index (categorical) factor 1 = Less than 25 kg/m2; 2 = 25 to 30 kg/m2; 3 = Over 30 kg/m2 The aggregated analysis can be performed as follows. We first start by preparing the login data and the resources to assign builder &lt;- DSI::newDSLoginBuilder() builder$append(server = &quot;study1&quot;, url = &quot;https://opal-demo.obiba.org&quot;, user = &quot;dsuser&quot;, password = &quot;password&quot;, resource = &quot;RSRC.CNSIM1&quot;, driver = &quot;OpalDriver&quot;) builder$append(server = &quot;study2&quot;, url = &quot;https://opal-demo.obiba.org&quot;, user = &quot;dsuser&quot;, password = &quot;password&quot;, resource = &quot;RSRC.CNSIM2&quot;, driver = &quot;OpalDriver&quot;) builder$append(server = &quot;study3&quot;, url = &quot;https://opal-demo.obiba.org&quot;, user = &quot;dsuser&quot;, password = &quot;password&quot;, resource = &quot;RSRC.CNSIM3&quot;, driver = &quot;OpalDriver&quot;) logindata &lt;- builder$build() Then, we login and assign resources conns &lt;- datashield.login(logins = logindata, assign = TRUE, symbol = &quot;res&quot;) The assigned objects are of class ResourceClient (and others) ds.class(&quot;res&quot;) $study1 [1] &quot;SQLResourceClient&quot; &quot;ResourceClient&quot; &quot;R6&quot; $study2 [1] &quot;TidyFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; $study3 [1] &quot;TidyFileResourceClient&quot; &quot;FileResourceClient&quot; &quot;ResourceClient&quot; [4] &quot;R6&quot; We then coerce the ResourceClient objects to data frames datashield.assign.expr(conns, symbol = &quot;D&quot;, expr = quote(as.resource.data.frame(res, strict = TRUE))) ds.class(&quot;D&quot;) $study1 [1] &quot;data.frame&quot; $study2 [1] &quot;data.frame&quot; $study3 [1] &quot;data.frame&quot; Now, we are ready to do usual DataSHIELD analyses ds.summary(&#39;D$LAB_HDL&#39;) $study1 $study1$class [1] &quot;numeric&quot; $study1$length [1] 2163 $study1$`quantiles &amp; mean` 5% 10% 25% 50% 75% 90% 95% Mean 0.875240 1.047400 1.300000 1.581000 1.844500 2.090000 2.210900 1.569416 $study2 $study2$class [1] &quot;numeric&quot; $study2$length [1] 3088 $study2$`quantiles &amp; mean` 5% 10% 25% 50% 75% 90% 95% Mean 0.850280 1.032200 1.294000 1.563000 1.840000 2.077000 2.225000 1.556648 $study3 $study3$class [1] &quot;numeric&quot; $study3$length [1] 4128 $study3$`quantiles &amp; mean` 5% 10% 25% 50% 75% 90% 95% Mean 0.876760 1.039200 1.304000 1.589000 1.856000 2.098800 2.244200 1.574687 NOTE: vector types are not necessarily the same depending on the data reader that was used ds.class(&#39;D$GENDER&#39;) $study1 [1] &quot;integer&quot; $study2 [1] &quot;haven_labelled&quot; &quot;vctrs_vctr&quot; &quot;double&quot; $study3 [1] &quot;numeric&quot; ds.asFactor(&#39;D$GENDER&#39;, &#39;GENDER&#39;) $all.unique.levels [1] &quot;0&quot; &quot;1&quot; $return.message [1] &quot;Data object &lt;GENDER&gt; correctly created in all specified data sources&quot; ds.summary(&#39;GENDER&#39;) $study1 $study1$class [1] &quot;factor&quot; $study1$length [1] 2163 $study1$categories [1] &quot;0&quot; &quot;1&quot; $study1$`count of &#39;0&#39;` [1] 1092 $study1$`count of &#39;1&#39;` [1] 1071 $study2 $study2$class [1] &quot;factor&quot; $study2$length [1] 3088 $study2$categories [1] &quot;0&quot; &quot;1&quot; $study2$`count of &#39;0&#39;` [1] 1585 $study2$`count of &#39;1&#39;` [1] 1503 $study3 $study3$class [1] &quot;factor&quot; $study3$length [1] 4128 $study3$categories [1] &quot;0&quot; &quot;1&quot; $study3$`count of &#39;0&#39;` [1] 2091 $study3$`count of &#39;1&#39;` [1] 2037 A logistic regression model can be fitted using privacy-protected analyses as if we would have the three datasets located in a single computer mod &lt;- ds.glm(&quot;DIS_DIAB ~ LAB_TRIG + GENDER&quot;, data = &quot;D&quot; , family=&quot;binomial&quot;) mod$coeff Estimate Std. Error z-value p-value low0.95CI.LP high0.95CI.LP P_OR (Intercept) -4.7792110 0.21081170 -22.670521 8.755236e-114 -5.1923944 -4.36602770 0.00833261 LAB_TRIG 0.3035931 0.05487436 5.532514 3.156737e-08 0.1960414 0.41114488 1.35471774 GENDER -0.4455989 0.20797931 -2.142516 3.215202e-02 -0.8532309 -0.03796695 0.64044060 low0.95CI.P_OR high0.95CI.P_OR (Intercept) 0.005527953 0.01254229 LAB_TRIG 1.216577226 1.50854390 GENDER 0.426036242 0.96274475 Logout the connection datashield.logout(conns) 8.2 Data analysis using a remote computation server Computation resources are resources on which tasks/commands can be triggered and from which resulting data can be retrieved. We can define a SSH Resource which is accessible through a secure shell. The path part of the URL is the remote working directory. The available commands are defined by the exec query parameter as described in the resources demo tutorial. PLINK is a program to perform whole genome association analysis (GWAS) in a computationally efficient manner. So, it may have sense to use this program to run the analyses instead of using R. PLINK data analysis requires to have genotype data in three files (.bed, .bim, .fam) and phenotype data in a different file. Therefore, the computation resource must contain the data and the commands that are allowed to be run in the server. This can be set up manually in the Opal server as indicated in the next figure Figure 8.1: Computation resource corresponding to PLINK example Notice that this resource are hosted at plink-demo.obiba.org in the folder /home/master/brge. This folder contains brge.bed, brge.bim, brge.fam, which are the three PLINK files and brge.phe file that encodes the phenotypic variables. The server also have installed PLINK. This computation resource is already available at our demo Opal server (brge_plink) as you can see in figure 6.2 The computation resource is a server side feature. So, we cannot see its functionallity using DataSHIELD. However, in order to easily illustrate how it works, let us create the resource in plain R library(resourcer) ssh.res &lt;- newResource( url = &quot;ssh://plink-demo.obiba.org:2222/home/master/brge?exec=ls,plink1,plink&quot;, identity = &quot;master&quot;, secret = &quot;master&quot; ) The resource connection client is resolved as follow: ssh.client &lt;- newResourceClient(ssh.res) class(ssh.client) [1] &quot;SshResourceClient&quot; &quot;CommandResourceClient&quot; &quot;ResourceClient&quot; &quot;R6&quot; This type of client allows to issue shell commands through a SSH connection. In our case we can use: ssh.client$getAllowedCommands() [1] &quot;ls&quot; &quot;plink1&quot; &quot;plink&quot; We can also see that the computation resource not only have PLINK program installed, but also our genomic and phenotypic data ssh.client$exec(&quot;ls&quot;) $status [1] 0 $output [1] &quot;brge.bed&quot; &quot;brge.bim&quot; &quot;brge.fam&quot; &quot;brge.gds&quot; &quot;brge.phe&quot; &quot;brge.txt&quot; $error character(0) $command [1] &quot;cd /home/master/brge &amp;&amp; ls&quot; attr(,&quot;class&quot;) [1] &quot;resource.exec&quot; Now, we are ready to run any PLINK command from R. Notice that in this case we want to assess association between the genotype data in bed format and use as phenotype the variable ‘obese’ that is in the file ‘obesity.phe’. The sentence in a PLINK command would be (NOTE: we avoid –out to indicate the output file since the file will be available in R as a tibble). plink1 --bfile brge --assoc --pheno brge.phe --pheno-name obese --noweb This could be done simply by executing ans &lt;- ssh.client$exec(&#39;plink1&#39;, c(&#39;--bfile&#39;, &#39;brge&#39;, &#39;--assoc&#39;, &#39;--pheno&#39;, &#39;brge.phe&#39;, &#39;--pheno-name&#39;, &#39;obese&#39;, &#39;--noweb&#39;)) ans $status [1] 0 $output [1] &quot;&quot; [2] &quot;@----------------------------------------------------------@&quot; [3] &quot;| PLINK! | v1.07 | 10/Aug/2009 |&quot; [4] &quot;|----------------------------------------------------------|&quot; [5] &quot;| (C) 2009 Shaun Purcell, GNU General Public License, v2 |&quot; [6] &quot;|----------------------------------------------------------|&quot; [7] &quot;| For documentation, citation &amp; bug-report instructions: |&quot; [8] &quot;| http://pngu.mgh.harvard.edu/purcell/plink/ |&quot; [9] &quot;@----------------------------------------------------------@&quot; [10] &quot;&quot; [11] &quot;Skipping web check... [ --noweb ] &quot; [12] &quot;Writing this text to log file [ plink.log ]&quot; [13] &quot;Analysis started: Sat Jan 23 15:50:33 2021&quot; [14] &quot;&quot; [15] &quot;Options in effect:&quot; [16] &quot;\\t--bfile brge&quot; [17] &quot;\\t--assoc&quot; [18] &quot;\\t--pheno brge.phe&quot; [19] &quot;\\t--pheno-name obese&quot; [20] &quot;\\t--noweb&quot; [21] &quot;&quot; [22] &quot;Reading map (extended format) from [ brge.bim ] &quot; [23] &quot;100000 markers to be included from [ brge.bim ]&quot; [24] &quot;Reading pedigree information from [ brge.fam ] &quot; [25] &quot;2312 individuals read from [ brge.fam ] &quot; [26] &quot;2312 individuals with nonmissing phenotypes&quot; [27] &quot;Assuming a disease phenotype (1=unaff, 2=aff, 0=miss)&quot; [28] &quot;Missing phenotype value is also -9&quot; [29] &quot;725 cases, 1587 controls and 0 missing&quot; [30] &quot;1097 males, 1215 females, and 0 of unspecified sex&quot; [31] &quot;Reading genotype bitfile from [ brge.bed ] &quot; [32] &quot;Detected that binary PED file is v1.00 SNP-major mode&quot; [33] &quot;Reading alternate phenotype from [ brge.phe ] &quot; [34] &quot;2204 individuals with non-missing alternate phenotype&quot; [35] &quot;Assuming a disease phenotype (1=unaff, 2=aff, 0=miss)&quot; [36] &quot;Missing phenotype value is also -9&quot; [37] &quot;402 cases, 1802 controls and 108 missing&quot; [38] &quot;Before frequency and genotyping pruning, there are 100000 SNPs&quot; [39] &quot;2312 founders and 0 non-founders found&quot; [40] &quot;6009 heterozygous haploid genotypes; set to missing&quot; [41] &quot;Writing list of heterozygous haploid genotypes to [ plink.hh ]&quot; [42] &quot;7 SNPs with no founder genotypes observed&quot; [43] &quot;Warning, MAF set to 0 for these SNPs (see --nonfounders)&quot; [44] &quot;Writing list of these SNPs to [ plink.nof ]&quot; [45] &quot;Total genotyping rate in remaining individuals is 0.994408&quot; [46] &quot;0 SNPs failed missingness test ( GENO &gt; 1 )&quot; [47] &quot;0 SNPs failed frequency test ( MAF &lt; 0 )&quot; [48] &quot;After frequency and genotyping pruning, there are 100000 SNPs&quot; [49] &quot;After filtering, 402 cases, 1802 controls and 108 missing&quot; [50] &quot;After filtering, 1097 males, 1215 females, and 0 of unspecified sex&quot; [51] &quot;Writing main association results to [ plink.assoc ] &quot; [52] &quot;&quot; [53] &quot;Analysis finished: Sat Jan 23 15:50:39 2021&quot; [54] &quot;&quot; $error character(0) $command [1] &quot;cd /home/master/brge &amp;&amp; plink1 --bfile brge --assoc --pheno brge.phe --pheno-name obese --noweb&quot; attr(,&quot;class&quot;) [1] &quot;resource.exec&quot; This is the output that is provided by PLINK and new output files have been created in the computation resource. These files can be downloaded in the R server by using the function ssh.client$downloadFile() We have implemented all these procedures in dsOmics package whose DataSHIELD client package is dsOmicsClient. Therefore, once the compuation resource is created in the Opal server we can perform such analyses using DataSHIELD by simply builder &lt;- newDSLoginBuilder() builder$append(server = &quot;study1&quot;, url = &quot;https://opal-demo.obiba.org&quot;, user = &quot;dsuser&quot;, password = &quot;password&quot;, resource = &quot;RSRC.brge_plink&quot;, driver = &quot;OpalDriver&quot;) logindata &lt;- builder$build() Then we assign the resource to a symbol (i.e. R object) called client which is a ssh resource conns &lt;- datashield.login(logins = logindata, assign = TRUE, symbol = &quot;client&quot;) ds.class(&quot;client&quot;) $study1 [1] &quot;SshResourceClient&quot; &quot;CommandResourceClient&quot; &quot;ResourceClient&quot; &quot;R6&quot; and then call to ds.PLINK () function. The arguments must be encapsulated in a single character without the command ‘plink1’. The ‘–noweb’ option is not necessary either. plink.arguments &lt;- &quot;--bfile brge --assoc --pheno brge.phe --pheno-name obese&quot; and then, the analyses are performed by library(dsOmicsClient) ans.plink &lt;- ds.PLINK(&quot;client&quot;, plink.arguments) The object ans.plink contains the PLINK results at each server as well as the outuput provided by PLINK lapply(ans.plink, names) $study1 [1] &quot;results&quot; &quot;plink.out&quot; head(ans.plink$study1$results) # A tibble: 6 x 10 CHR SNP BP A1 F_A F_U A2 CHISQ P OR &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 0 MitoC3993T 3993 T 0.0150 0.0146 C 0.00836 0.927 1.03 2 0 MitoG4821A 4821 A 0 0.00169 G 1.34 0.248 0 3 0 MitoG6027A 6027 A 0.00249 0.00501 G 0.922 0.337 0.495 4 0 MitoT6153C 6153 C 0.00873 0.0117 T 0.516 0.472 0.746 5 0 MitoC7275T 7275 T 0 0.00111 C 0.894 0.344 0 6 0 MitoT9699C 9699 C 0.0908 0.0669 T 5.67 0.0172 1.39 ans.plink$study$plink.out $status [1] 0 $output [1] &quot;&quot; [2] &quot;@----------------------------------------------------------@&quot; [3] &quot;| PLINK! | v1.07 | 10/Aug/2009 |&quot; [4] &quot;|----------------------------------------------------------|&quot; [5] &quot;| (C) 2009 Shaun Purcell, GNU General Public License, v2 |&quot; [6] &quot;|----------------------------------------------------------|&quot; [7] &quot;| For documentation, citation &amp; bug-report instructions: |&quot; [8] &quot;| http://pngu.mgh.harvard.edu/purcell/plink/ |&quot; [9] &quot;@----------------------------------------------------------@&quot; [10] &quot;&quot; [11] &quot;Skipping web check... [ --noweb ] &quot; [12] &quot;Writing this text to log file [ /tmp/ssh-8752/out.log ]&quot; [13] &quot;Analysis started: Sat Jan 23 15:50:41 2021&quot; [14] &quot;&quot; [15] &quot;Options in effect:&quot; [16] &quot;\\t--bfile brge&quot; [17] &quot;\\t--assoc&quot; [18] &quot;\\t--pheno brge.phe&quot; [19] &quot;\\t--pheno-name obese&quot; [20] &quot;\\t--noweb&quot; [21] &quot;\\t--out /tmp/ssh-8752/out&quot; [22] &quot;&quot; [23] &quot;Reading map (extended format) from [ brge.bim ] &quot; [24] &quot;100000 markers to be included from [ brge.bim ]&quot; [25] &quot;Reading pedigree information from [ brge.fam ] &quot; [26] &quot;2312 individuals read from [ brge.fam ] &quot; [27] &quot;2312 individuals with nonmissing phenotypes&quot; [28] &quot;Assuming a disease phenotype (1=unaff, 2=aff, 0=miss)&quot; [29] &quot;Missing phenotype value is also -9&quot; [30] &quot;725 cases, 1587 controls and 0 missing&quot; [31] &quot;1097 males, 1215 females, and 0 of unspecified sex&quot; [32] &quot;Reading genotype bitfile from [ brge.bed ] &quot; [33] &quot;Detected that binary PED file is v1.00 SNP-major mode&quot; [34] &quot;Reading alternate phenotype from [ brge.phe ] &quot; [35] &quot;2204 individuals with non-missing alternate phenotype&quot; [36] &quot;Assuming a disease phenotype (1=unaff, 2=aff, 0=miss)&quot; [37] &quot;Missing phenotype value is also -9&quot; [38] &quot;402 cases, 1802 controls and 108 missing&quot; [39] &quot;Before frequency and genotyping pruning, there are 100000 SNPs&quot; [40] &quot;2312 founders and 0 non-founders found&quot; [41] &quot;6009 heterozygous haploid genotypes; set to missing&quot; [42] &quot;Writing list of heterozygous haploid genotypes to [ /tmp/ssh-8752/out.hh ]&quot; [43] &quot;7 SNPs with no founder genotypes observed&quot; [44] &quot;Warning, MAF set to 0 for these SNPs (see --nonfounders)&quot; [45] &quot;Writing list of these SNPs to [ /tmp/ssh-8752/out.nof ]&quot; [46] &quot;Total genotyping rate in remaining individuals is 0.994408&quot; [47] &quot;0 SNPs failed missingness test ( GENO &gt; 1 )&quot; [48] &quot;0 SNPs failed frequency test ( MAF &lt; 0 )&quot; [49] &quot;After frequency and genotyping pruning, there are 100000 SNPs&quot; [50] &quot;After filtering, 402 cases, 1802 controls and 108 missing&quot; [51] &quot;After filtering, 1097 males, 1215 females, and 0 of unspecified sex&quot; [52] &quot;Writing main association results to [ /tmp/ssh-8752/out.assoc ] &quot; [53] &quot;&quot; [54] &quot;Analysis finished: Sat Jan 23 15:50:48 2021&quot; [55] &quot;&quot; $error character(0) $command [1] &quot;cd /home/master/brge &amp;&amp; plink1 --bfile brge --assoc --pheno brge.phe --pheno-name obese --noweb --out /tmp/ssh-8752/out&quot; attr(,&quot;class&quot;) [1] &quot;resource.exec&quot; Let us finish our tutorial by removing the created resources opal.resource_delete(opal=o, project=&#39;RSRC&#39;, resource=&#39;pheno_TCGA&#39;) opal.resource_delete(opal=o, project=&#39;RSRC&#39;, resource=&#39;asthma&#39;) opal.resource_delete(opal=o, project=&#39;RSRC&#39;, resource=&#39;genexpr&#39;) "],
["exercise.html", "9 Exercise", " 9 Exercise Physiological ecologists often analyze the responses of physiological or biochemical traits to environmental factors such as temperature, irradiance, water potential, or the concentrations of CO2, O2, and inorganic nutrients. Some researchers were interested in knowing the relationship between CO2 uptake (variable uptake) for six Echinochloa crus-galli plants from Quebec and six plants from Mississippi as a function of ambient CO2 concentration (variable conc). The CO2 uptake of six plants from Quebec and six plants from Mississippi was measured at several levels of ambient CO2 concentration. Half the plants of each type were chilled overnight before the experiment was conducted. Data cannot be shared between plants given confidentiality restrictions and researchers are interested in pooling both datasets via a virtually pooled-analysis. The scheme of the project can be seen in the next figure Figure 9.1: Carbon Dioxide Uptake in Quebec and Mississippi Grass Plants. Scheme of the proposed data analysis using DataSHIELD. Data of two locations are stored in different repositories and are available as .tsv files. Both datasets are .tsv files that are available in two different locations: Quebec (IGSlobal repository): https://raw.githubusercontent.com/isglobal-brge/brgedata/master/inst/extdata/co2_quebec.tsv Mississippi (OBiBa repository): https://raw.githubusercontent.com/obiba/resources-workshop/main/data/co2_mississippi.tsv To the following steps to perform the required analysis: Upload the two resources to the project RSRC available at the demo Opal site (https://opal-demo.obiba.org/, u:administrator, p:password). IMPORTANT NOTE: In order to avoid problems with duplicated names (all you are using the same server) give a name to the two resources like boston_XXXXXX and mississippi_XXXXXX and replace XXXXXX by random lower and upper letters (for example: boston_QrTyUZ and mississippi_AgbnYJ). Login the connection to the two resources to DataSHIELD and assign the resources to objects having the same name as the resource name (in our case boston_QrTyUZ and mississippi_AgbnYJ). Using dsBaseClient functions (for those new in DataSHIELD see ls(\"package:dsBaseClient\")): Check the names of the variables of each data frame. Check that the number of observations at each study (variable Type) is 42. Create a “combined” scatterplot of the CO2 uptake (Y-axis) vs CO2 concentration (variable conc) (X-axix). Run a linear model to investigate whether CO2 concentration can predicts CO2 uptake adjusting for chilled overnight factor (Treatment) and study (Type). "],
["session-info.html", "10 Session Info", " 10 Session Info sessionInfo() R version 4.0.2 (2020-06-22) Platform: x86_64-w64-mingw32/x64 (64-bit) Running under: Windows 10 x64 (build 19041) Matrix products: default locale: [1] LC_COLLATE=Spanish_Spain.1252 LC_CTYPE=Spanish_Spain.1252 LC_MONETARY=Spanish_Spain.1252 [4] LC_NUMERIC=C LC_TIME=Spanish_Spain.1252 attached base packages: [1] stats graphics grDevices utils datasets methods base other attached packages: [1] dsOmicsClient_1.1.0 dsBaseClient_6.1.0 DSOpal_1.1.0 DSI_1.1.0 [5] progress_1.2.2 opalr_1.5.1 ssh_0.7.0 readr_1.3.1 [9] resourcer_1.1.0 httr_1.4.2 R6_2.4.1 BiocStyle_2.16.0 [13] knitr_1.29 loaded via a namespace (and not attached): [1] Biobase_2.48.0 jsonlite_1.7.0 splines_4.0.2 tmvnsim_1.0-2 [5] sn_1.6-2 Rdpack_1.0.0 assertthat_0.2.1 askpass_1.1 [9] highr_0.8 BiocManager_1.30.10 stats4_4.0.2 TFisher_0.2.0 [13] yaml_2.2.1 ggrepel_0.8.2 numDeriv_2016.8-1.1 pillar_1.4.6 [17] lattice_0.20-41 glue_1.4.2 digest_0.6.25 RColorBrewer_1.1-2 [21] colorspace_1.4-1 sandwich_2.5-1 htmltools_0.5.0 Matrix_1.2-18 [25] pkgconfig_2.0.3 bibtex_0.4.2.2 bookdown_0.20 purrr_0.3.4 [29] mvtnorm_1.1-1 scales_1.1.1 openssl_1.4.2 tibble_3.0.3 [33] generics_0.0.2 ggplot2_3.3.2 ellipsis_0.3.1 TH.data_1.0-10 [37] credentials_1.3.0 BiocGenerics_0.34.0 cli_2.0.2 mnormt_2.0.2 [41] mime_0.9 survival_3.2-3 magrittr_1.5 crayon_1.3.4 [45] evaluate_0.14 fansi_0.4.1 MASS_7.3-52 tools_4.0.2 [49] prettyunits_1.1.1 hms_0.5.3 gbRd_0.4-11 lifecycle_0.2.0 [53] multcomp_1.4-13 mutoss_0.1-12 stringr_1.4.0 munsell_0.5.0 [57] plotrix_3.7-8 compiler_4.0.2 rlang_0.4.7 grid_4.0.2 [61] rstudioapi_0.11 rmarkdown_2.3 gtable_0.3.0 codetools_0.2-16 [65] multtest_2.44.0 curl_4.3 zoo_1.8-8 dplyr_1.0.2 [69] utf8_1.1.4 mathjaxr_1.0-1 metap_1.4 stringi_1.4.6 [73] parallel_4.0.2 Rcpp_1.0.5 png_0.1-7 vctrs_0.3.3 [77] tidyselect_1.1.0 xfun_0.16 "]
]
